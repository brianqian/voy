generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  password     String
  firstName    String?
  lastName     String?
  User_List    User_List[]
  User_Ratings User_Ratings[]

  @@map("user")
}

model Person {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String
  imdbId         String?      @unique
  tmdbId         String?      @unique
  tmdbPopularity Float?       @db.Real
  birthDate      DateTime?
  deathDate      DateTime?
  Movie_Cast     Movie_Cast[]
  TV_Cast        TV_Cast[]

  @@map("person")
}

model Movie {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imdbId                  String?                   @unique
  tmdbId                  String?                   @unique
  tmdbPopularity          Float?                    @db.Real
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  title                   String?
  originalTitle           String
  fullTitle               String?
  releaseDate             DateTime?
  USReleaseDate           DateTime?
  runtimeMins             Int?
  overview                String?
  alternateOverview       String?
  tagline                 String?
  mpaaRating              MPAARating?
  imdbRating              Int?
  imdbVoteCount           Int?
  metacriticRating        Int?
  rtRating                Int?
  Media_Awards            Media_Awards[]
  Media_Genre             Media_Genre[]
  Media_ProductionCompany Media_ProductionCompany[]
  MoviesListItem          MoviesListItem[]
  Movie_Cast              Movie_Cast[]
  User_Ratings            User_Ratings[]

  @@map("movie")
}

model TVSeries {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  imdbId                  String?                   @unique
  tmdbId                  String?                   @unique
  tmdbPopularity          Float?                    @db.Real
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  title                   String?
  originalTitle           String
  fullTitle               String?
  type                    String                    @default("TV Show")
  releaseDate             DateTime?
  USReleaseDate           DateTime?
  endDate                 DateTime?
  runtimeMins             Int?
  overview                String?
  alternateOverview       String?
  tagline                 String?
  imdbRating              Int?
  imdbVoteCount           Int?
  airTime                 String?
  nextScheduledAirtime    DateTime?
  Media_Awards            Media_Awards[]
  Media_Genre             Media_Genre[]
  Media_ProductionCompany Media_ProductionCompany[]
  TV_Cast                 TV_Cast[]
  TV_Episode              TVEpisode[]
  TV_Show_Networks        TV_Show_Networks[]
  TVSeriessListItem       TVSeriessListItem[]
  User_Ratings            User_Ratings[]

  @@map("tv_show")
}

model ProductionCompany {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  tmdbId                  String?                   @unique
  imdbId                  String?                   @unique
  name                    String
  Media_ProductionCompany Media_ProductionCompany[]

  @@map("production_company")
}

model Network {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  tmdbId           String?            @unique
  imdbId           String?            @unique
  name             String
  TV_Show_Networks TV_Show_Networks[]

  @@map("network")
}

model Award {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  result       String
  awardType    String
  category     String
  year         Int
  Media_Awards Media_Awards[]

  @@map("award")
}

model MoviesListItem {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  movieId    String    @db.Uuid
  userListId String    @db.Uuid
  movie      Movie     @relation(fields: [movieId], references: [id])
  userList   User_List @relation(fields: [userListId], references: [id])

  @@id([movieId, userListId])
  @@map("movie_list_item")
}

model TVSeriessListItem {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tvSeriesId String    @db.Uuid
  userListId String    @db.Uuid
  tvSeries   TVSeries  @relation(fields: [tvSeriesId], references: [id])
  userList   User_List @relation(fields: [userListId], references: [id])

  @@id([tvSeriesId, userListId])
  @@map("tv_show_list_item")
}

model TVEpisode {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tvSeriesId       String         @db.Uuid
  season           Int
  tmdbId           String         @unique
  imdbRating       Int?
  metacriticRating Int?
  imdbVoteCount    Int?
  tvSeries         TVSeries       @relation(fields: [tvSeriesId], references: [id])
  Media_Awards     Media_Awards[]
  TV_Cast          TV_Cast[]

  @@map("tv_episode")
}

model Movie_Cast {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  movieId       String   @db.Uuid
  personId      String   @db.Uuid
  role          CastRole
  characterName String?
  movie         Movie    @relation(fields: [movieId], references: [id])
  person        Person   @relation(fields: [personId], references: [id])

  @@id([personId, movieId, role])
  @@map("movies_casts")
}

model TV_Cast {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tvEpisodeId   String    @db.Uuid
  personId      String    @db.Uuid
  role          CastRole
  characterName String?
  tvSeriesId    String    @db.Uuid
  person        Person    @relation(fields: [personId], references: [id])
  tvEpisode     TVEpisode @relation(fields: [tvEpisodeId], references: [id])
  TVSeries      TVSeries  @relation(fields: [tvSeriesId], references: [id])

  @@id([personId, tvEpisodeId, role])
  @@map("tv_casts")
}

model Media_Genre {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  genre      String
  tvSeriesId String?   @db.Uuid
  movieId    String?   @db.Uuid
  movie      Movie?    @relation(fields: [movieId], references: [id])
  tvSeries   TVSeries? @relation(fields: [tvSeriesId], references: [id])

  @@map("media_genres")
}

model User_List {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String              @db.Uuid
  listTitle         String
  type              TVOrMovie?
  user              User                @relation(fields: [userId], references: [id])
  MoviesListItem    MoviesListItem[]
  TVSeriessListItem TVSeriessListItem[]

  @@map("users_lists")
}

model TV_Show_Networks {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tvSeriesId String   @db.Uuid
  networkId  String   @db.Uuid
  network    Network  @relation(fields: [networkId], references: [id])
  tvSeries   TVSeries @relation(fields: [tvSeriesId], references: [id])

  @@id([tvSeriesId, networkId])
  @@map("tv_series_networks")
}

model User_Ratings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  rating     Int
  userId     String    @db.Uuid
  tvSeriesId String?   @db.Uuid
  movieId    String?   @db.Uuid
  movie      Movie?    @relation(fields: [movieId], references: [id])
  tvSeries   TVSeries? @relation(fields: [tvSeriesId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map("users_ratings")
}

model Media_Awards {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  awardId     String     @db.Uuid
  tvSeriesId  String?    @db.Uuid
  tvEpisodeId String?    @db.Uuid
  movieId     String?    @db.Uuid
  award       Award      @relation(fields: [awardId], references: [id])
  movie       Movie?     @relation(fields: [movieId], references: [id])
  tvEpisode   TVEpisode? @relation(fields: [tvEpisodeId], references: [id])
  tvSeries    TVSeries?  @relation(fields: [tvSeriesId], references: [id])

  @@map("media_awards")
}

model Media_ProductionCompany {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  companyId  String            @db.Uuid
  tvSeriesId String?           @db.Uuid
  movieId    String?           @db.Uuid
  company    ProductionCompany @relation(fields: [companyId], references: [id])
  movie      Movie?            @relation(fields: [movieId], references: [id])
  tvSeries   TVSeries?         @relation(fields: [tvSeriesId], references: [id])

  @@map("media_production_companies")
}

enum MPAARating {
  G
  PG
  PG13
  R
  NC17
}

enum CastRole {
  WRITER
  DIRECTOR
  ACTOR
  PRODUCER
  EXECUTIVE_PRODUCER
}

enum TVOrMovie {
  TV
  MOVIE
}
